def getEuclideanDistance(A, B):
    S = sum([(a-b)**2 for a, b in zip (A, B)])
    return S**0.5
   
   
def displayDataSet(plt, data, classified, not_classified = [], scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    ax0.set_xlim([0.0, 1.0])
    ax0.set_ylim([0.0, 1.0])
    ax0.set_xlabel("x", fontsize=14)
    ax0.set_ylabel("y", fontsize=14)
    ax0.set_xticks([0.0, 0.25, 0.5, 0.75, 1.0])
    ax0.set_yticks([0.0, 0.25, 0.5, 0.75, 1.0])
    
    COLORS = ["b", "g", "r", "c", "m", "y", "gold", "slateblue", "deeppink", "grey"]
    
    objects = sum([len(a) for a in data])
    
    for cnt, a in enumerate(classified):
        X = [data[i][0] for i in a]
        Y = [data[i][1] for i in a]
        ax0.plot(X, Y, marker="o", ls="", ms=5, mfc = COLORS[cnt], mec="black")
        
    if len(not_classified) > 0:
        X = [data[i][0] for i in not_classified]
        Y = [data[i][1] for i in not_classified]
        ax0.plot(X, Y, marker="s", ls="", ms=6, mfc = "black", mec="black")
    
    plt.tight_layout()
    plt.draw()
    plt.show()

def displayCompareDataSet(plt, data, reference_classified, knn_classified, scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    ax0.set_xlim([0.0, 1.0])
    ax0.set_ylim([0.0, 1.0])
    ax0.set_xlabel("x", fontsize=14)
    ax0.set_ylabel("y", fontsize=14)
    ax0.set_xticks([0.0, 0.25, 0.5, 0.75, 1.0])
    ax0.set_yticks([0.0, 0.25, 0.5, 0.75, 1.0])
    
    COLORS = ["b", "g", "r", "c", "m", "y", "gold", "slateblue", "deeppink", "grey"]
    
    objects = sum([len(a) for a in data])

    INCORRECTLY = []
    COLOR = []

    for i in range(len(knn_classified)):
        for j in range(len(knn_classified[i])):
            if knn_classified[i][j] not in reference_classified[i]:
                INCORRECTLY.append(knn_classified[i][j])
                for k in range(len(reference_classified)):
                    if knn_classified[i][j] in reference_classified[k]:
                        COLOR.append(COLORS[k])
                        break
                        
    for c in range(len(reference_classified)):
        X = [data[INCORRECTLY[i]][0] for i in range(len(INCORRECTLY)) if COLOR[i] == COLORS[c]]
        Y = [data[INCORRECTLY[i]][1] for i in range(len(INCORRECTLY)) if COLOR[i] == COLORS[c]]
        ax0.plot(X, Y, marker="s", ls="", ms=9, mfc = COLORS[c], mec="black")    
    
    for cnt, a in enumerate(knn_classified):
        X = [data[i][0] for i in a]
        Y = [data[i][1] for i in a]
        ax0.plot(X, Y, marker="o", ls="", ms=5, mfc = COLORS[cnt], mec="black")

	
    
    plt.tight_layout()
    plt.draw()
    plt.show()
    
def getTestDataSet():
    return [[0.25980258928914035, 0.7655116779002312], [0.18693830608897657, 0.7834271584229567], [0.2323892511073395, 0.8060266414635234], [0.18245127527368585, 0.7431398467959367], [0.2098729415587089, 0.7344682346313631], [0.18853229067689722, 0.7842951000809403], [0.26912569720966584, 0.7957361528430443], [0.19020098972108546, 0.7975175323493953], [0.25085655998780676, 0.7246018248223394], [0.23532339919378903, 0.871543741261008], [0.12962857187109472, 0.873595307576713], [0.16401114075234427, 0.7755297044641337], [0.16308955536890288, 0.8316926011744782], [0.18106441442797522, 0.9119848308841574], [0.165411426713162, 0.7653802653838561], [0.23742600682065826, 0.8080106874749717], [0.15264496361992702, 0.8414462176171933], [0.23463371747059406, 0.8019563670471643], [0.16481091484141902, 0.7577539191560507], [0.15633882350658837, 0.8655833090434761], [0.2837812257433207, 0.8077914273778376], [0.2581598534580727, 0.8188071959347848], [0.14944464908218136, 0.8197394818883317], [0.21438288939667605, 0.7994737712975449], [0.20882671127640645, 0.8673324901245407], [0.12894534645708894, 0.7286895277515959], [0.25663218548791694, 0.7845199245665047], [0.22775549115515276, 0.8675038948853137], [0.16778651055856791, 0.8710371847354161], [0.28014635722943865, 0.765909060573891], [0.19172412491037502, 0.7978150101452778], [0.18909582786458976, 0.7866760284880222], [0.14145521538764744, 0.8321079148767867], [0.11982502284207303, 0.799758060864879], [0.2746778641380437, 0.8285799813183714], [0.17763913219574062, 0.6697887953827508], [0.25737240506735015, 0.7893145841330457], [0.1258723758824749, 0.81424096244157], [0.2403509510544619, 0.8548333562171884], [0.23595427428356205, 0.7947133668210868], [0.17070549316605188, 0.7306249847123912], [0.21134289108522228, 0.7483281102873013], [0.1569370260271722, 0.8669411426607528], [0.17195540544362015, 0.7195346185778018], [0.26277518690638896, 0.8647617443626592], [0.14672983047576582, 0.773075646400556], [0.1483242952596357, 0.8679049277412393], [0.08379878987477336, 0.834657653560581], [0.1973195595388869, 0.7016339074539512], [0.1875725343387556, 0.8131716666706553], [0.49068787921818896, 0.3482293128806996], [0.4794627368127827, 0.6162520879065718], [0.7248412043261755, 0.3733980476431683], [0.9327231019816931, 0.40540682010707624], [0.4364182485989701, 0.5372532159239836], [0.55100346355375, 0.6433139700151832], [0.5782690019219253, 0.42743409770798974], [0.43321080211688034, 0.6837148822835022], [0.5313234972426957, 0.5088393008296579], [0.6576530726994186, 0.5968065101776029], [0.5711093739818758, 0.5734756456171498], [0.5964107710116944, 0.5471931606257586], [0.7246601128572128, 0.8149854071561565], [0.6369972649206959, 0.6165338631915084], [0.5296699809295239, 0.6134110220361638], [0.6434465210933824, 0.6917117329111853], [0.48018600567055686, 0.608094219073704], [0.5120539690660804, 0.5554585176669603], [0.6460908331623262, 0.6249046910949634], [0.5017408517496932, 0.6322238241114909], [0.4521359870370856, 0.6487359522958812], [0.4734354084375231, 0.46572395261319194], [0.6475787024794202, 0.7888358416496555], [0.3768632259948076, 0.5094065999092534], [0.47987683011167814, 0.5481619391878396], [0.5475175368562383, 0.4580981634103799], [0.6225509481926823, 0.5938439619425823], [0.5032357222766346, 0.5614233746248798], [0.6359324833542133, 0.6036736884666684], [0.4165651998898791, 0.6809616168091881], [0.6613772482464841, 0.6393002827625115], [0.4934719724219756, 0.6002695024402988], [0.5205478886713293, 0.6220568812191317], [0.5684935207484139, 0.6545491034994904], [0.6905213799828775, 0.667056381615316], [0.26777095784741883, 0.4819468120316279], [0.6279150879149645, 0.6299944027118431], [0.2707146473674114, 0.6321709095730011], [0.6842450710367799, 0.7629353970272635], [0.5523976413824793, 0.6943662265495383], [0.6301003278824204, 0.488866358890346], [0.6025280433681083, 0.7417023868761018], [0.5144040359334877, 0.5801935508523259], [0.5643215674618207, 0.7189943992929717], [0.6573065118784343, 0.6200727339983326], [0.466846362450708, 0.5638215607535351], [0.6809367746166548, 0.8276228314609658], [0.5445812260303017, 0.5776656471092005], [0.727550849268714, 0.6866504815358548], [0.49983166342986196, 0.6086937850512023], [0.763595883025503, 0.21873181831030705], [0.8438873131306718, 0.21370925096392296], [0.7692025122528546, 0.21962790821984574], [0.8142947538532289, 0.23904702852409046], [0.7901617400430961, 0.2600287317924511], [0.7161188591499101, 0.19751233450395803], [0.7800183866999963, 0.28674105601167166], [0.7360496514756905, 0.15470889130567192], [0.8061183945738369, 0.21824090370169721], [0.7407633677745482, 0.21412084414970803], [0.7740105645125237, 0.1700414970905622], [0.7366495376648851, 0.23740358150167745], [0.7641165097747938, 0.19467271082770582], [0.7572529236648459, 0.15996834928586628], [0.7635281904387123, 0.21563373212086717], [0.7171247410775117, 0.2032321385059441], [0.7427812620906769, 0.2081234982032099], [0.7125833705189477, 0.2514962962993874], [0.8169069273298982, 0.18719842512248033], [0.752291941171763, 0.1792938698633045], [0.7756139493585137, 0.19780832603936202], [0.7637753476766609, 0.18423436490564488], [0.7454896351059094, 0.17525988403680184], [0.7096460638222494, 0.2812204077851721], [0.8111267039967297, 0.22513954935739264], [0.7502627516412388, 0.15758632117229662], [0.7603337267478987, 0.233850645012879], [0.7399561013335461, 0.190757136698997], [0.7046439026902264, 0.19089309962688827], [0.7704272542365859, 0.17833056586384655], [0.7177601024475891, 0.20972266874083634], [0.7354916806376537, 0.1685151229557355], [0.8071220515341826, 0.15248756865160162], [0.7773632897848626, 0.19388273164026645], [0.8126443421374628, 0.24953728123768817], [0.7915824963626531, 0.1685113727552806], [0.7264270131177496, 0.21146676421838909], [0.7375155265059037, 0.21851584412352354], [0.7896423795078987, 0.19520122836146908], [0.7396716895253048, 0.1863917936832151], [0.7667451749699322, 0.18954452087105222], [0.7253925643577133, 0.17186891671149737], [0.777422292337635, 0.2132181979256972], [0.7370262882652369, 0.18089393591910755], [0.7162108691535054, 0.21177072434317612], [0.7393873959744715, 0.2062939363227969], [0.7284048257328658, 0.2511976107935823], [0.7793079651848375, 0.13897251772000985], [0.82178034458249, 0.15061057027263663], [0.758364910839459, 0.2173608631410356], [0.24140459856555463, 0.2868782404421361], [0.2194647059389752, 0.25498108946833176], [0.2284613417122905, 0.31249279857763523], [0.1551844249562901, 0.2038002388053073], [0.2502445399712676, 0.30036832307173134], [0.23047708643613726, 0.2953569735311845], [0.1292416844460486, 0.18099875600387896], [0.2771797098499762, 0.24179998035090078], [0.2238921418172741, 0.2858747284134067], [0.32799188733750834, 0.264738848902937], [0.24748833487940902, 0.36127182645975525], [0.310710653243451, 0.4809968139047759], [0.24770367064368162, 0.2665299058548768], [0.13663424385301984, 0.22223894257714832], [0.2981410637763645, 0.4850745524227462], [0.28164717273553824, 0.40192312562996413], [0.21240602808176415, 0.3865063491054737], [0.15713634304379007, 0.29002122903090705], [0.22556146151260886, 0.30944690593994406], [0.31477455520420783, 0.40796325392942284], [0.17573311426478827, 0.32792236516590445], [0.24169932968804955, 0.2925707474727543], [0.19682161835845502, 0.35444427135778767], [0.18168165403967676, 0.2932363974148367], [0.22938508210179925, 0.4685136782483831], [0.20332977767271956, 0.26585364705715425], [0.25351998258629593, 0.2548554786573292], [0.17880843774074887, 0.3175686188856597], [0.2676085739337526, 0.3199831245661197], [0.3001804376243233, 0.2287189714820349], [0.14680391456801847, 0.1351603027942524], [0.14269305855210906, 0.30119250329326114], [0.14467436869642947, 0.34223658577882937], [0.2473106490374033, 0.28658827727460806], [0.27564659537288844, 0.36117093114189025], [0.09089254660924162, 0.3471499383765774], [0.17018281729578483, 0.32532332894872595], [0.14778419164831744, 0.32198639430571147], [0.2740585187586583, 0.15396870998790993], [0.1549688706045129, 0.35922136949233685], [0.13717390160755605, 0.3995031506312071], [0.24801728354365055, 0.2614037325382841], [0.2815635920649294, 0.34353059497817645], [0.2365949834541582, 0.30125213565484754], [0.1329422783519746, 0.2171466515976858], [0.2554222545497132, 0.2479190467592895], [0.17297060371414155, 0.22729751298938788], [0.19718139778865862, 0.28495250451271364], [0.11150408173938373, 0.29526886081358966], [0.15207098673022074, 0.3089306068250743]]

def getTestClassified():
    return [[1, 2, 3, 5, 6, 7, 9, 12, 13, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 46, 47, 48, 49], [51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 90, 95, 98, 99], [100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 133, 134, 135, 136, 137, 139, 143, 145, 148, 149], [150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 163, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 180, 182, 184, 185, 186, 187, 189, 191, 192, 193, 197, 198, 199]]

def getTestNotClassified():
    return [0, 4, 8, 10, 11, 14, 15, 16, 20, 25, 33, 39, 40, 41, 42, 45, 50, 52, 56, 65, 67, 69, 73, 85, 87, 89, 91, 92, 93, 94, 96, 97, 107, 108, 109, 111, 115, 123, 126, 131, 132, 138, 140, 141, 142, 144, 146, 147, 152, 157, 162, 164, 165, 166, 172, 173, 176, 181, 183, 188, 190, 194, 195, 196]
    
def getTestAllClasses():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]]


def getTest2DataSet():
    return [[0.3852784660217148, 0.614287043003214], [0.23356781732941542, 0.33129444656700474], [0.5285689596519404, 0.6262722335939548], [0.350437355151186, 0.6261276735556258], [0.42113844373410086, 0.5109519142159842], [0.379989171664767, 0.5978201922848453], [0.195378837713864, 0.5285672711640463], [0.2470089136126068, 0.5063206209373255], [0.3011233747411824, 0.510715155497702], [0.4350564510373035, 0.5098175364010031], [0.34199589408418907, 0.6951684537918901], [0.2654291264879131, 0.5898393302863036], [0.4386728602561959, 0.6352822100312367], [0.3520843797649043, 0.6221775764395296], [0.3457413837496188, 0.6314601157398335], [0.5058527789387415, 0.6770413626270813], [0.4303244917773981, 0.5572793408236361], [0.4689857354175095, 0.6078820558973346], [0.4918340235984483, 0.7042615456949435], [0.3432478431840596, 0.6888260507697567], [0.19672914398322305, 0.5962459174798962], [0.34634754932769307, 0.7121565584125699], [0.21508512032570593, 0.44147528436228656], [0.3372223292342285, 0.6492909897063737], [0.249320205165055, 0.6429997980238792], [0.4464163141598901, 0.6270221139365945], [0.5103863425550224, 0.5411252450618078], [0.34239447252512817, 0.577100554844131], [0.23509334003958646, 0.4856295154728908], [0.3964771331326828, 0.44457203589130356], [0.46713852229583885, 0.652956424269051], [0.3761770619608917, 0.642062476209137], [0.35521464535339037, 0.5136108183771452], [0.35574011711262854, 0.5521425267074623], [0.32925622132430576, 0.6487564968912705], [0.42271285881765186, 0.8030149754784826], [0.34379994043709233, 0.5790395510888717], [0.36609869323184385, 0.5952838590890875], [0.34123482963002894, 0.6014414989298601], [0.5770130761122652, 0.7343170751985395], [0.3640857617107259, 0.5112834047163148], [0.35173655417961186, 0.6241983025875285], [0.44037644690983174, 0.6534248692005598], [0.5065930155505521, 0.4726731845792068], [0.5624794709785994, 0.6434605106881687], [0.5645112674552385, 0.41092373775183455], [0.328327885907024, 0.6256329431616197], [0.3203659176817616, 0.46920856151757495], [0.16464154570235326, 0.6774882581782463], [0.3409177328230131, 0.6188595262248147], [0.96554903668905223, 0.39258188412879319], [0.33431129750533939, 0.19656767036429379], [0.6009559887828404, 0.069435279312952569], [0.64433292526595265, 0.16326314376480733], [0.92249367513405145, 0.4025243985611287], [0.90237329843820346, 0.63791377794842163], [0.79714911649224085, 0.63947531516139255], [0.79384423684486183, 0.47240105831766305], [0.8501992854703937, 0.44365717912075475], [0.96689110209607121, 0.48822283358999874], [0.23290428887053133, 0.001899302250461421], [0.61378893497464271, 0.19181174634429432], [0.86749199985219261, 0.52951182417697285], [0.72127170737359736, 0.31123206876556436], [0.17169519008167639, 0.17859631429153799], [0.93701592880062323, 0.49973307654595889], [0.48683239805717671, 0.02553614893568712], [0.5669451105782366, 0.22141317802728055], [0.69593960453358517, 0.36538246804956992], [0.2745783289758586, 0.16700373572909344], [0.87198890140807528, 0.60534942719583018], [0.13430427264878597, 0.14238916005694047], [0.85656195918179756, 0.66171026588114901], [0.77400407094412604, 0.39701655242022454], [0.7382107225805622, 0.2324441781866512], [0.80783521652650203, 0.63792392677664855], [0.83569115739458388, 0.49348750274331843], [0.6188535580849055, 0.27999950901968218], [0.87405703919197797, 0.59821862062370235], [0.92223761930382642, 0.71413473449070008], [0.8370539583805392, 0.37231262242784546], [0.91590541001636083, 0.60911802018697292], [0.23837770932397248, 0.085374153695478849], [0.66961227566970227, 0.21723367124142767], [0.89774401245564528, 0.43618400243656597], [0.17766605752941442, 0.16261985890241282], [0.81802024753628666, 0.64737349920919729], [0.74410742345662895, 0.21993878146738499], [0.27661539853313244, 0.17983314080311674], [0.15392552053631908, 0.10568474720025223], [0.55830414833396524, 0.24155428041276505], [0.63721518803736643, 0.055090442433080922], [0.91590288763639938, 0.45888193261307586], [0.58428051207617282, 0.024220386930251414], [0.78971314687840299, 0.52673927451209968], [0.38017686486971258, 0.14523275304964189], [0.28318482599856792, 0.047871141285094398], [0.3697747997937193, 0.16235148089753093], [0.91195247953288361, 0.7458120815363054], [0.83880154018236674, 0.63981070241614413], [0.47704764353923612, 0.17687352683094903], [0.96097914073198343, 0.71556774799530432], [0.38071383048273399, 0.12566247309812839], [0.24871637809265473, 0.13989388076907183], [0.17144685142190541, 0.032465095468748317], [0.47888672305377089, 0.013701072849533591], [0.52629561663310365, 0.27441843889341211], [0.60925321956656586, 0.032377873790943479], [0.87332995595715646, 0.6422927788373789], [0.89643861796683266, 0.6703998881817298], [0.4451789780768266, 0.10706437344077446], [0.97736126273480373, 0.65883579253197821], [0.42829677602940297, 0.1398399995147046], [0.60638281169723196, 0.25306315390995116], [0.56263579113041495, 0.18093342498785758], [0.11504500535133816, 0.034077862595750297], [0.86104294172658191, 0.36197261656093715], [0.9151935668109098, 0.32025325775064672], [0.54270507866042583, 0.24957370560877412], [0.94024774606178796, 0.56343382753048998], [0.28677053499133398, 0.12408925584277763], [0.93594306873780408, 0.46016710826678792], [0.41430391834117986, 0.072181815885630551], [0.3691490615665951, 0.14611491192482484], [0.23945647075009802, 0.048114484040819527], [0.20342652013605511, 0.15865080846058777], [0.90097316191882937, 0.45514953574579348], [0.17300972865120737, 0.024322500127610613], [0.88450531892764228, 0.51328811389996809], [0.46683716407790921, 0.0790931024607886], [0.52326562707148816, 0.28441710939063125], [0.67810904113951465, 0.28824950805980065], [0.88628466198173439, 0.50809437618551367], [0.80297852752749965, 0.77241437093755883], [0.21681225782933597, 0.15099567846421269], [0.63212425545521678, 0.18754612214671063], [0.52831049011684839, 0.091949630787243497], [0.67015863173337997, 0.24248010228950811], [0.90826712758729433, 0.74292532716364446], [0.23987002705885199, 0.12185691725496073], [0.75515228385410793, 0.38561646835203606], [0.55721708561796912, 0.13515363025985139], [0.85754092605053145, 0.74314338922601741], [0.55352504917674517, 0.17408804579876891], [0.58032031433782105, 0.08741115664311061], [0.63634622236947769, 0.046206682090807361], [0.93899933338883068, 0.57951116418715332], [0.80075818560889711, 0.68255833620703676], [0.49138456923436802, 0.17012254543910632], [0.97187739907974469, 0.59002153635784049], [0.48742139318829314, 0.24070988097209378], [0.80702905627185695, 0.70658340856777624], [0.92353392780313004, 0.75442323351640195], [0.55714088097792547, 0.34178432296989048], [0.47453744112831064, 0.33808996900246019], [0.5178126327307776, 0.17489433751857308], [0.79501694722675742, 0.77153702998463058], [0.66525290470310772, 0.77803900076218035], [0.68246826400467886, 0.69809710554816984], [0.45384952344802887, 0.31902964029460812], [0.56504754829906134, 0.42989079247266193], [0.3527248425812114, 0.17072065154676774], [0.49344405050291829, 0.32648025614447196], [0.53033499017426811, 0.27715049607707543], [0.12898909503718661, 0.058214120569159977], [0.12122252503387201, 0.28144252838033734], [0.22202835166786411, 0.18999670787406997], [0.64407263638176926, 0.3447203867856708], [0.84463972851440605, 0.67436692591416469], [0.18219228156431161, 0.16061143947053869], [0.21669319220221317, 0.039662873527933407], [0.32818912960998514, 0.10692943522662302], [0.79648254515499683, 0.48569528604589174], [0.27678060791972803, 0.32298140500380856], [0.44845696567520565, 0.3569384437121278], [0.73832726612507982, 0.60150037248010912], [0.69554452298318892, 0.7620445503987916], [0.63787299940497733, 0.59165166569492567], [0.38126859954709236, 0.23887637722498822], [0.31891604069925006, 0.22053256617514105], [0.69638035202938608, 0.79691139397847865], [0.60310816112693666, 0.39866998864779557], [0.78164226609226339, 0.6672113458216723], [0.75179914018377691, 0.45866410153952702], [0.74331416944907569, 0.3612225539063405], [0.13751193764496494, 0.27754554289910682], [0.15683592300964869, 0.15660798040668156], [0.32166748039798698, 0.38110385457729101], [0.87199033331934661, 0.56989552396060505], [0.54209454728241901, 0.35011955972231251], [0.83928992688397042, 0.60748366161330147], [0.92699845041034545, 0.67480154276750093], [0.87172869747751369, 0.58761220905759259], [0.76172478408895483, 0.45652088978994509], [0.7675101409678321, 0.78377793678697538], [0.84697908867553617, 0.62907228814496019], [0.81011070015430697, 0.57401772247795058], [0.18060292490074548, 0.065120358349189722], [0.6768961997467029, 0.43321036649230027], [0.5539983052376396, 0.17186328322153333], [0.50421808961346404, 0.40613815865308467], [0.6804285028878011, 0.42986414200567052], [0.77879987155418484, 0.54813707759584362], [0.70790406483435642, 0.54939712486911274], [0.68340008919112072, 0.50444801937371997], [0.68999823960284112, 0.70843995228212253], [0.29028748610037802, 0.36063782698591956], [0.85630680301198026, 0.453245095395088], [0.50812409761365773, 0.39819901870422203], [0.62230764894694135, 0.49585862225431127], [0.87745085365348252, 0.64401502984351588], [0.13484751241485216, 0.26654253027020436], [0.76482805865255032, 0.47420386480462884], [0.61153837134020661, 0.51047369518461272], [0.78830618696548105, 0.71282848889667905], [0.91248272099757799, 0.76969260797075945], [0.75771476150204875, 0.3348783302018179], [0.42550443930328141, 0.33907200984577424], [0.5375252458608456, 0.2514117311695534], [0.96546579068384086, 0.74275525970616618], [0.39551711160228509, 0.36470186473859917], [0.51436530052671592, 0.26102380800560987], [0.19700179921335451, 0.34174610472839223], [0.84474767824185304, 0.7162897841036644], [0.42378023631063066, 0.21096041513769415], [0.86600471576553006, 0.59238540815943763], [0.17328705455254118, 0.15205473004047665], [0.34275634894059448, 0.14558372560439103], [0.77989886702877342, 0.62303870519078497], [0.59582431923104018, 0.46221058595618103], [0.63375145503151697, 0.42210111292810998], [0.28932326774603301, 0.055382232135856468], [0.53770106345359336, 0.27298710515846469], [0.37057126193263368, 0.29649191002913056], [0.6535666012881084, 0.55352559521155142], [0.22760189480417273, 0.33569053494479195], [0.94583814338752614, 0.72246738298403035], [0.12521958203801725, 0.27658204248529483], [0.60465016533716798, 0.44544877176879566], [0.78495158900281292, 0.59084156508003849], [0.3971598005208189, 0.078490708256699571], [0.50203419658238291, 0.39821802798836803], [0.8613959844694713, 0.74649472529241578], [0.219423920839739, 0.32096455183034212], [0.67898028108660635, 0.48777741210148823], [0.53780370377092213, 0.33002073709930269], [0.35234157266711152, 0.13761268811383687], [0.86789649547894843, 0.60882672508085589], [0.43732367709828435, 0.37076405020013958], [0.71843003547239337, 0.76464347464549076]]
    
def getTest2Classified():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249]]
    

def getTest3DataSet():
    return [[0.4309945577884165, 0.5909216224658961], [0.5418666500631288, 0.5945164824483634], [0.4080256991583657, 0.49809018972095204], [0.3273163736180708, 0.6043926894247837], [0.4243182453157507, 0.48820486588955847], [0.4053895109537365, 0.6098810232155953], [0.3599844069949407, 0.6316675285572599], [0.3977337641822669, 0.6998238745984813], [0.3072928838206178, 0.5251598304318308], [0.37775750558571547, 0.6132358739222732], [0.79985063034241644, 0.55173669644085022], [0.55250778741089768, 0.25779845404670887], [0.30902684642258549, 0.1733767574469296], [0.3275413566440401, 0.14822661719880126], [0.29513433339130668, 0.18158529049731831], [0.74574046393743676, 0.53557227136955454], [0.101551627746369, 0.093706439886103943], [0.89546577178145437, 0.72740269289874471], [0.50170797679070389, 0.05322001370029783], [0.30419579161173887, 0.072169980475009332], [0.46784259343158829, 0.15713397303760213], [0.78062660539440809, 0.46926613643123366], [0.41736798163143585, 0.031010948936991745], [0.8595084701179394, 0.46410271541438192], [0.94970032407949501, 0.33440304942434956], [0.40413058362591958, 0.22571203132955797], [0.71478054038053274, 0.41355655773306732], [0.24087808804217531, 0.054920704077818572], [0.22485002768590762, 0.083670645411359601], [0.53151355774297004, 0.24607951278935103], [0.87694051991701727, 0.75012055799172872], [0.84187058972992124, 0.49678782893591905], [0.68041262695637694, 0.63766308625816737], [0.28837819036127527, 0.22871579083914217], [0.19514598733229049, 0.20575893087188057], [0.21638625718954121, 0.072304306959734999], [0.67149091451344722, 0.37558029964185558], [0.17596556328760443, 0.15551296740578724], [0.89441404846062667, 0.69921093289886316], [0.14843694168717167, 0.051072446084131751], [0.49096302115129409, 0.40371983291515584], [0.67073271116228605, 0.46198695888060526], [0.78951128997707531, 0.76590988836381679], [0.85657413911719893, 0.71380050835757347], [0.21536067017542584, 0.354832282784595], [0.51273147004473874, 0.23466452318202491], [0.19357469350025419, 0.15661952445437866], [0.56605205800334613, 0.18888297238363505], [0.31082974217123543, 0.061510025846665539], [0.73318425858872949, 0.58518563236613785]]

def getTest3Classified():
    return [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]]
	
def displayResults(plt, MD, scale = 1):
    fig = plt.figure(figsize=(5 * scale, 5 * scale), dpi=100)
    ax0 = plt.subplot(1,1,1)
    KS = [v[0] for v in MD]
    ax0.set_xlim([min(KS), max(KS)])
    M = [v[1] for v in MD]
    ax0.set_ylim([0.0, max(M)])
    ax0.set_xlabel("K", fontsize=14)
    ax0.set_ylabel("TOTAL DISTANCE", fontsize=14)
     
    X = [d[0] for d in MD]
    Y = [d[1] for d in MD]
    ax0.plot(X, Y, marker="o", ls="--", ms=5, mfc = "black", mec="black")

    
    plt.tight_layout()
    plt.draw()
    plt.show()
