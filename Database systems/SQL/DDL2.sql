1.......
2.
ALTER TABLE PROJECTS ADD (
    CONSTRAINT PK_PROJECTS PRIMARY KEY ( PROJECT_ID ),
    CONSTRAINT UK_PROJEKT_NAME UNIQUE ( PROJECT_NAME ),
    CONSTRAINT CHK_PROJECTS_END_START_DATE CHECK ( END_DATE > START_DATE ),
    CONSTRAINT CHK_PROJECTS_BUDGET CHECK ( PROJECT_BUDGET > 0 ),
    CONSTRAINT CHK_PROJECTS_NO_OF_EMP CHECK ( NUMBER_OF_EMP >= 0 )
)
ALTER TABLE PROJECTS MODIFY (
    PROJECT_NAME NOT NULL,
    START_DATE NOT NULL
)
3.
ALTER TABLE PROJECTS MODIFY
    NUMBER_OF_EMP NOT NULL

UPDATE PROJECTS
SET
    NUMBER_OF_EMP = 0
WHERE
    NUMBER_OF_EMP IS NULL

ALTER TABLE PROJECTS MODIFY
    NUMBER_OF_EMP NOT NULL
4.
ALTER TABLE PROJECTS ADD (
    MANAGER_ID NUMBER(4),
    CONSTRAINT projects_fk_emps FOREIGN KEY ( MANAGER_ID )
        REFERENCES EMPLOYEES ( EMP_ID )
)
5.
UPDATE PROJECTS
SET
    MANAGER_ID = 1234
WHERE
    PROJECT_NAME = 'Advanced Data Analysis'
6.
UPDATE PROJECTS
SET
    MANAGER_ID = (
        SELECT
            EMP_ID
        FROM
            EMPLOYEES
        WHERE
            NAME = 'Mark'
            AND SURNAME = 'Clark'
    )
WHERE
    PROJECT_NAME = 'Advanced Data Analysis'

DELETE FROM EMPLOYEES
WHERE
    NAME = 'Mark'
    AND SURNAME = 'Clark'

Could not delete data.
7.
CREATE TABLE ASSIGNMENTS (
    PROJECT_ID  INTEGER NOT NULL
        CONSTRAINT KF_PID
            REFERENCES PROJECTS ( PROJECT_ID ),
    EMP_ID      NUMBER(4) NOT NULL
        CONSTRAINT KF_EID
            REFERENCES EMPLOYEES ( EMP_ID ),
    FUNCTION    VARCHAR(100) NOT NULL
        CONSTRAINT FUN_RANGE CHECK ( FUNCTION IN ( 'designer', 'programmer', 'tester' ) ),
    START_DATE  DATE DEFAULT CURRENT_DATE NOT NULL,
    END_DATE    DATE,
    SALARY      NUMERIC(8, 2) NOT NULL
        CONSTRAINT SALARY_GRT_0 CHECK ( SALARY > 0 ),
    CONSTRAINT END_GRT CHECK ( END_DATE > START_DATE )
)
8.
    INSERT INTO ASSIGNMENTS VALUES (
        1,
        100,
        'designer',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        500
    )

    INSERT INTO ASSIGNMENTS VALUES (
        1,
        110,
        'programmer',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        1000
    )

    INSERT INTO ASSIGNMENTS VALUES (
        2,
        120,
        'tester',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        9
    )

        INSERT INTO ASSIGNMENTS VALUES (
        2,
        130,
        'programmer',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        15000
    )
9.
    INSERT INTO ASSIGNMENTS VALUES (
        2,
        130,
        'gamer',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        15000
    )
Message: ORA-02290: naruszono wiÄ™zy CHECK (AI145453.FUN_RANGE)
10.
ALTER TABLE ASSIGNMENTS DROP CONSTRAINT FUN_RANGE
    INSERT INTO ASSIGNMENTS VALUES (
        2,
        130,
        'gamer',
        TO_DATE('01 01 1999', 'DD MM YYYY'),
        TO_DATE('02 03 2010', 'DD MM YYYY'),
        15000
    )
Message: 1 row inserted
Views

1.
CREATE VIEW PROFESSORS AS
    SELECT
        NAME,
        SURNAME,
        HIRE_DATE,
        SALARY,
        ADD_SALARY,
        NVL(
            ADD_SALARY, 0
        ) / SALARY * 100 AS ADD_PERCENT
    FROM
        EMPLOYEES
    WHERE
        JOB = 'PROFESSOR'
2.
CREATE VIEW DEPARTMENTS_TOTAL AS
    SELECT
        DEPARTMENTS.DEPT_ID,
        DEPT_NAME         AS DEPARTMENT,
        AVG(SALARY + NVL(
            ADD_SALARY, 0
        ))                AS AVG_SALARY,
        COUNT(EMP_ID)     AS NUM_OF_EMPLS
    FROM
        DEPARTMENTS
        LEFT JOIN EMPLOYEES ON DEPARTMENTS.DEPT_ID = EMPLOYEES.DEPT_ID
    GROUP BY (
        DEPARTMENTS.DEPT_ID,
        DEPT_NAME
    )
3.
SELECT
    SURNAME,
    NAME,
    SALARY + NVL(
        ADD_SALARY, 0
    )                    AS SALARY,
    AVG_SALARY,
    SALARY - AVG_SALARY  AS DIFF
FROM
    EMPLOYEES
    INNER JOIN DEPARTMENTS_TOTAL D USING ( DEPT_ID )
WHERE
    SALARY + NVL(
        ADD_SALARY, 0
    ) > AVG_SALARY
4.
SELECT
    DEPARTMENT,
    NUM_OF_EMPLS
FROM
    DEPARTMENTS_TOTAL
ORDER BY
    NUM_OF_EMPLS DESC
FETCH FIRST 1 ROW ONLY
5.
CREATE VIEW EMPS_AND_BOSSES AS
    SELECT
        E.SURNAME
        || ' '
        || E.NAME     AS EMPLOYEE,
        E.SALARY      AS EMP_SALARY,
        B.SURNAME
        || ' '
        || B.NAME     AS BOSS,
        B.SALARY      AS BOSS_SALARY
    FROM
        EMPLOYEES E
        INNER JOIN EMPLOYEES B ON E.BOSS_ID = B.EMP_ID
    WHERE
        E.SALARY < B.SALARY
    ORDER BY
        EMPLOYEE
